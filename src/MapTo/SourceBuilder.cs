using System.Text;
using MapTo.Extensions;
using MapTo.Models;

namespace MapTo
{
    internal static class SourceBuilder
    {
        internal const string NamespaceName = "MapTo";
        internal const string MapFromAttributeName = "MapFrom";
        internal const string IgnorePropertyAttributeName = "IgnoreProperty";
        internal const string GeneratedFilesHeader = "// <auto-generated />";

        private const int Indent1 = 4;
        private const int Indent2 = Indent1 * 2;
        private const int Indent3 = Indent1 * 3;

        internal static (string source, string hintName) GenerateMapFromAttribute(SourceGenerationOptions options)
        {
            var builder = new StringBuilder();
            builder
                .AppendFileHeader()
                .AppendLine("using System;")
                .AppendLine()
                .AppendFormat("namespace {0}", NamespaceName)
                .AppendOpeningBracket();

            if (options.GenerateXmlDocument)
            {
                builder
                    .PadLeft(Indent1).AppendLine("/// <summary>")
                    .PadLeft(Indent1).AppendLine("/// Specifies that the annotated class can be mapped from the provided <see cref=\"SourceType\"/>.")
                    .PadLeft(Indent1).AppendLine("/// </summary>");
            }

            builder
                .PadLeft(Indent1).AppendLine("[AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]")
                .PadLeft(Indent1).AppendFormat("public sealed class {0}Attribute : Attribute", MapFromAttributeName)
                .AppendOpeningBracket(Indent1);

            if (options.GenerateXmlDocument)
            {
                builder
                    .PadLeft(Indent2).AppendLine("/// <summary>")
                    .PadLeft(Indent2).AppendFormat("/// Initializes a new instance of the <see cref=\"{0}Attribute\"/> class with the specified <paramref name=\"sourceType\"/>.", MapFromAttributeName).AppendLine()
                    .PadLeft(Indent2).AppendLine("/// </summary>");
            }

            builder
                .PadLeft(Indent2).AppendFormat("public {0}Attribute(Type sourceType)", MapFromAttributeName)
                .AppendOpeningBracket(Indent2)
                .PadLeft(Indent3).AppendLine("SourceType = sourceType;")
                .AppendClosingBracket(Indent2, false)
                .AppendLine()
                .AppendLine();

            if (options.GenerateXmlDocument)
            {
                builder
                    .PadLeft(Indent2).AppendLine("/// <summary>")
                    .PadLeft(Indent2).AppendLine("/// Gets the type of the class that the annotated class should be able to map from.")
                    .PadLeft(Indent2).AppendLine("/// </summary>");
            }

            builder
                .PadLeft(Indent2).AppendLine("public Type SourceType { get; }")
                .AppendClosingBracket(Indent1, false)
                .AppendClosingBracket();

            return (builder.ToString(), $"{MapFromAttributeName}Attribute.g.cs");
        }

        internal static (string source, string hintName) GenerateIgnorePropertyAttribute(SourceGenerationOptions options)
        {
            var builder = new StringBuilder();
            builder
                .AppendFileHeader()
                .AppendLine("using System;")
                .AppendLine()
                .AppendFormat("namespace {0}", NamespaceName)
                .AppendOpeningBracket();

            if (options.GenerateXmlDocument)
            {
                builder
                    .PadLeft(Indent1).AppendLine("/// <summary>")
                    .PadLeft(Indent1).AppendLine("/// Specified that the annotated property should not be included in the generated mappings.")
                    .PadLeft(Indent1).AppendLine("/// </summary>");
            }

            builder
                .PadLeft(Indent1).AppendLine("[AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]")
                .PadLeft(Indent1).AppendFormat("public sealed class {0}Attribute : Attribute {{ }}", IgnorePropertyAttributeName)
                .AppendClosingBracket();

            return (builder.ToString(), $"{IgnorePropertyAttributeName}Attribute.g.cs");
        }

        internal static (string source, string hintName) GenerateSource(MapModel model)
        {
            var builder = new StringBuilder();

            builder
                .AppendFileHeader()
                .GenerateUsings(model)

                // Namespace declaration
                .AppendFormat("namespace {0}", model.Namespace)
                .AppendOpeningBracket()

                // Class declaration
                .PadLeft(Indent1)
                .AppendFormat("partial class {0}", model.ClassName)
                .AppendOpeningBracket(Indent1)

                // Class body
                .GenerateConstructor(model)
                .AppendLine()
                .GenerateFactoryMethod(model)

                // End class declaration
                .AppendClosingBracket(Indent1)

                // Extensions Class declaration
                .AppendLine()
                .AppendLine()
                .PadLeft(Indent1)
                .AppendFormat("{0} static partial class {1}To{2}Extensions", model.Options.GeneratedMethodsAccessModifier.ToLowercaseString(), model.SourceClassName, model.ClassName)
                .AppendOpeningBracket(Indent1)

                // Extension class body
                .GenerateSourceTypeExtensionMethod(model)

                // End extensions class declaration
                .AppendClosingBracket(Indent1)

                // End namespace declaration
                .AppendClosingBracket();

            return (builder.ToString(), $"{model.ClassName}.g.cs");
        }

        private static StringBuilder GenerateUsings(this StringBuilder builder, MapModel model)
        {
            builder.AppendLine("using System;");
            return builder.AppendLine();
        }

        private static StringBuilder GenerateConstructor(this StringBuilder builder, MapModel model)
        {
            var sourceClassParameterName = model.SourceClassName.ToCamelCase();

            if (model.Options.GenerateXmlDocument)
            {
                builder
                    .PadLeft(Indent2).AppendLine("/// <summary>")
                    .PadLeft(Indent2).AppendFormat("/// Initializes a new instance of the <see cref=\"{0}\"/> class", model.ClassName).AppendLine()
                    .PadLeft(Indent2).AppendFormat("/// using the property values from the specified <paramref name=\"{0}\"/>.", sourceClassParameterName).AppendLine()
                    .PadLeft(Indent2).AppendLine("/// </summary>")
                    .PadLeft(Indent2).AppendFormat("/// <exception cref=\"ArgumentNullException\">{0} is null</exception>", sourceClassParameterName).AppendLine();
            }

            builder
                .PadLeft(Indent2).AppendFormat("{0} {1}({2} {3})", model.Options.ConstructorAccessModifier.ToLowercaseString(), model.ClassName, model.SourceClassFullName, sourceClassParameterName)
                .AppendOpeningBracket(Indent2)
                .PadLeft(Indent3).AppendFormat("if ({0} == null) throw new ArgumentNullException(nameof({0}));", sourceClassParameterName).AppendLine()
                .AppendLine();

            foreach (var property in model.MappedProperties)
            {
                builder
                    .PadLeft(Indent3)
                    .AppendFormat("{0} = {1}.{2};", property, sourceClassParameterName, property)
                    .AppendLine();
            }

            // End constructor declaration
            return builder.AppendClosingBracket(Indent2, false);
        }

        private static StringBuilder GenerateFactoryMethod(this StringBuilder builder, MapModel model)
        {
            var sourceClassParameterName = model.SourceClassName.ToCamelCase();

            return builder
                .AppendLine()
                .AppendConvertorMethodsXmlDocs(model, sourceClassParameterName)
                .PadLeft(Indent2).AppendFormat("{0} static {1} From({2} {3})", model.Options.GeneratedMethodsAccessModifier.ToLowercaseString(), model.ClassName, model.SourceClassFullName, sourceClassParameterName)
                .AppendOpeningBracket(Indent2)
                .PadLeft(Indent3).AppendFormat("return {0} == null ? null : new {1}({0});", sourceClassParameterName, model.ClassName)
                .AppendClosingBracket(Indent2);
        }

        private static StringBuilder GenerateSourceTypeExtensionMethod(this StringBuilder builder, MapModel model)
        {
            var sourceClassParameterName = model.SourceClassName.ToCamelCase();

            return builder
                .AppendConvertorMethodsXmlDocs(model, sourceClassParameterName)
                .PadLeft(Indent2).AppendFormat("{0} static {1} To{1}(this {2} {3})", model.Options.GeneratedMethodsAccessModifier.ToLowercaseString(), model.ClassName, model.SourceClassFullName, sourceClassParameterName)
                .AppendOpeningBracket(Indent2)
                .PadLeft(Indent3).AppendFormat("return {0} == null ? null : new {1}({0});", sourceClassParameterName, model.ClassName)
                .AppendClosingBracket(Indent2);
        }

        private static StringBuilder AppendFileHeader(this StringBuilder builder) =>
            builder.AppendLine(GeneratedFilesHeader);

        private static StringBuilder AppendConvertorMethodsXmlDocs(this StringBuilder builder, MapModel model, string sourceClassParameterName)
        {
            if (!model.Options.GenerateXmlDocument)
            {
                return builder;
            }

            return builder
                .PadLeft(Indent2).AppendLine("/// <summary>")
                .PadLeft(Indent2).AppendFormat("/// Creates a new instance of <see cref=\"{0}\"/> and sets its participating properties", model.ClassName).AppendLine()
                .PadLeft(Indent2).AppendFormat("/// using the property values from <paramref name=\"{0}\"/>.", sourceClassParameterName).AppendLine()
                .PadLeft(Indent2).AppendLine("/// </summary>")
                .PadLeft(Indent2).AppendFormat("/// <param name=\"{0}\">Instance of <see cref=\"{1}\"/> to use as source.</param>", sourceClassParameterName, model.SourceClassName).AppendLine()
                .PadLeft(Indent2).AppendFormat("/// <returns>A new instance of <see cred=\"{0}\"/> -or- <c>null</c> if <paramref name=\"{1}\"/> is <c>null</c>.</returns>", model.ClassName, sourceClassParameterName).AppendLine();
        }
    }
}