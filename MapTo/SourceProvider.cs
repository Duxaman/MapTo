using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MapTo.Extensions;
using MapTo.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace MapTo
{
    internal static class SourceProvider
    {
        internal const string NamespaceName = "MapTo";
        internal const string MapFromAttributeName = "MapFrom";
        private const int Indent1 = 4; //"    ";
        private const int Indent2 = Indent1 * 2; // "        ";
        private const int Indent3 = Indent1 * 3; // "            ";

        internal static void AddMapToAttribute(this GeneratorExecutionContext context)
        {
            const string source = @"
using System;

namespace MapTo
{
    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
    public sealed class MapFromAttribute : Attribute
    {
        public MapFromAttribute(Type sourceType)
        {
            SourceType = sourceType;
        }

        public Type SourceType { get; }
    }
}
";

            context.AddSource("MapFromAttribute", SourceText.From(source, Encoding.UTF8));
        }

        internal static (string source, string hintName) GenerateSource(MapModel model)
        {
            var builder = new StringBuilder();

            // Namespace declaration
            builder
                .AppendFileHeader()
                .AppendFormat("namespace {0}", model.Namespace)
                .AppendOpeningBracket();

            // Class declaration
            builder
                .PadLeft(Indent1)
                .AppendFormat("{0} class {1}", model.ClassModifiers, model.ClassName)
                .AppendOpeningBracket(Indent1);

            // Constructor declaration
            builder.GenerateConstructor(model, out var mappedProperties);

            // End class declaration
            builder.AppendClosingBracket(Indent1);

            // End namespace declaration
            builder.AppendClosingBracket();

            return (builder.ToString(), $"{model.ClassName}.cs");
        }

        private static StringBuilder GenerateConstructor(this StringBuilder builder, MapModel model, out List<IPropertySymbol> mappedProperties)
        {
            var destinationClassParameterName = model.DestinationClassName.ToCamelCase();
            
            builder
                .PadLeft(Indent2)
                .AppendFormat("public {0}({1} {2})", model.ClassName, model.DestinationClassName, destinationClassParameterName)
                .AppendOpeningBracket(Indent2);

            mappedProperties = new List<IPropertySymbol>();
            foreach (var propertySymbol in model.DestinationTypeProperties)
            {
                if (model.Properties.Any(p => p.Name == propertySymbol.Name))
                {
                    mappedProperties.Add(propertySymbol);
                    builder
                        .PadLeft(Indent3)
                        .AppendFormat("{0} = {1}.{2};{3}", propertySymbol.Name, destinationClassParameterName, propertySymbol.Name, Environment.NewLine);
                }
            }

            // End constructor declaration
            return builder.AppendClosingBracket(Indent2, padNewLine: false);
        }

        private static StringBuilder AppendOpeningBracket(this StringBuilder builder, int indent = 0)
        {
            return builder.AppendLine().PadLeft(indent).AppendFormat("{{{0}", Environment.NewLine);
        }

        private static StringBuilder AppendClosingBracket(this StringBuilder builder, int indent = 0, bool padNewLine = true)
        {
            if (padNewLine)
            {
                builder.AppendLine();
            }

            return builder.PadLeft(indent).Append("}");
        }

        private static StringBuilder PadLeft(this StringBuilder builder, int width)
        {
            for (var i = 0; i < width; i++)
            {
                builder.Append(" ");
            }

            return builder;
        }

        private static StringBuilder AppendFileHeader(this StringBuilder builder)
        {
            return builder
                .AppendLine("// <auto-generated />")
                .AppendLine();
        }

        private static string GetValueText(this NameSyntax? nameSyntax)
        {
            return (nameSyntax as IdentifierNameSyntax)?.Identifier.ValueText ?? string.Empty;
        }
    }
}